import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from telegram import Update
from telegram.ext import Application, ContextTypes
import asyncio
import threading
import os
import requests
import logging
from datetime import datetime
import pytz
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

VK_USER_TOKEN = os.getenv("VK_USER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
AUTHORIZED_TELEGRAM_USER_ID = os.getenv("AUTHORIZED_TELEGRAM_USER_ID")
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([VK_USER_TOKEN, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, AUTHORIZED_TELEGRAM_USER_ID]):
    raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK
vk_session = vk_api.VkApi(token=VK_USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

class BotStats:
    def __init__(self):
        self.start_time = datetime.now(pytz.timezone(TIMEZONE))
        self.message_count = 0
        self.post_count = 0

bot_stats = BotStats()

def download_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å"""
    try:
        response = requests.get(url, stream=True, timeout=10)
        if response.status_code == 200:
            filename = os.path.basename(url.split('?')[0])
            filepath = os.path.join("/tmp", filename)
            with open(filepath, "wb") as f:
                for chunk in response.iter_content(1024 * 1024):
                    f.write(chunk)
            return filepath
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    return None

async def send_media(media_type, url, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ Telegram"""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {media_type}: {url}")
        filepath = download_file(url)
        if not filepath:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return

        with open(filepath, 'rb') as file:
            if media_type == 'photo':
                await application.bot.send_photo(TELEGRAM_CHAT_ID, photo=file, caption=caption)
            elif media_type == 'doc':
                await application.bot.send_document(TELEGRAM_CHAT_ID, document=file, caption=caption)
            elif media_type == 'audio':
                await application.bot.send_audio(TELEGRAM_CHAT_ID, audio=file, caption=caption)
        
        os.remove(filepath)
        logger.info(f"–§–∞–π–ª {media_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")

async def forward_to_telegram(user_id, text, attachments):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –í–ö –≤ Telegram"""
    try:
        bot_stats.message_count += 1

        user_info = vk.users.get(user_ids=user_id, fields="first_name,last_name")[0]
        sender_name = f"{user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} {user_info.get('last_name', '')}"

        message_text = f"üì® {sender_name}:\n{text}"
        await application.bot.send_message(TELEGRAM_CHAT_ID, text=message_text)

        for attach in attachments:
            attach_type = attach['type']
            media = attach[attach_type]

            if attach_type == 'photo':
                sizes = media.get('sizes', [])
                media_url = max(sizes, key=lambda x: x.get('width', 0)).get('url', '')

            elif attach_type in ['doc', 'audio', 'video']:
                media_url = media.get('url', '')

            elif attach_type == 'audio_message':
                media_url = media.get('link_mp3', '')

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è: {attach_type}")
                continue

            if media_url:
                await send_media(attach_type, media_url, f"{sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª {attach_type}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}", exc_info=True)

async def forward_post_to_telegram(post):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ VK –≤ Telegram"""
    try:
        bot_stats.post_count += 1

        owner_id = post['owner_id']
        post_id = post['id']
        post_link = f"https://vk.com/wall{owner_id}_{post_id}"
        text = post.get('text', '')

        message_text = f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n{text}\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç]({post_link})"
        await application.bot.send_message(TELEGRAM_CHAT_ID, text=message_text, parse_mode="Markdown")

        attachments = post.get('attachments', [])
        for attach in attachments:
            attach_type = attach['type']
            media = attach[attach_type]

            if attach_type == 'photo':
                sizes = media.get('sizes', [])
                media_url = max(sizes, key=lambda x: x.get('width', 0)).get('url', '')

            elif attach_type in ['doc', 'audio', 'video']:
                media_url = media.get('url', '')

            elif attach_type == 'link':
                media_url = media.get('url', '')
                await application.bot.send_message(TELEGRAM_CHAT_ID, text=f"üîó [–°—Å—ã–ª–∫–∞]({media_url})", parse_mode="Markdown")
                continue

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ: {attach_type}")
                continue

            if media_url:
                await send_media(attach_type, media_url, "–í–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–æ—Å—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞: {e}", exc_info=True)

def vk_listener(loop):
    """–°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ VK"""
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    user_id = event.user_id
                    message_data = vk.messages.getHistory(user_id=user_id, count=1)['items'][0]

                    text = message_data.get('text', '')
                    attachments = message_data.get('attachments', [])

                    asyncio.run_coroutine_threadsafe(
                        forward_to_telegram(user_id, text, attachments),
                        loop
                    )

                elif event.type == VkEventType.WALL_POST_NEW:
                    post_data = event.raw
                    asyncio.run_coroutine_threadsafe(
                        forward_post_to_telegram(post_data),
                        loop
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ VK listener: {e}")
            time.sleep(5)

def main():
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    loop = asyncio.get_event_loop()
    threading.Thread(target=vk_listener, args=(loop,), daemon=True).start()
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()