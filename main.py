import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import asyncio
import threading
import os
import requests
import logging
import time
from datetime import datetime
import pytz
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

VK_USER_TOKEN = os.getenv("VK_USER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not all([VK_USER_TOKEN, TELEGRAM_TOKEN]):
    raise ValueError("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=VK_USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
selected_friends = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üì© –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="latest_messages")],
        [InlineKeyboardButton("üë• –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", callback_data="friends_page_0")]
    ]
    await update.message.reply_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_latest_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    messages = vk.messages.getConversations(count=5)
    msg_list = messages.get("items", [])

    if not msg_list:
        await query.edit_message_text("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    text = "üì© –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    keyboard = []

    for msg in msg_list:
        last_message = msg["last_message"]
        user_id = last_message["from_id"]
        user_info = vk.users.get(user_ids=user_id, fields="first_name,last_name")[0]
        sender_name = f"{user_info['first_name']} {user_info['last_name']}"
        
        text += f"\nüë§ {sender_name}: {last_message['text'][:50]}..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_text = last_message.get("reply_message", {}).get("text", "‚ùå –ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ")
        text += f"\nüìù –û—Ç–≤–µ—Ç: {reply_text if reply_text != '‚ùå –ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ' else '‚ùå –ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ'}"

        keyboard.append([InlineKeyboardButton(sender_name, callback_data=f"open_dialog_{user_id}")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    await query.answer()

    page = int(query.data.split("_")[-1])
    friends = vk.friends.get(order="hints", fields="first_name,last_name")
    friends_list = friends.get("items", [])

    if not friends_list:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ VK.")
        return

    per_page = 5
    start = page * per_page
    end = start + per_page
    friends_page = friends_list[start:end]

    keyboard = [[InlineKeyboardButton(f"{f['first_name']} {f['last_name']}", callback_data=f"open_dialog_{f['id']}")] for f in friends_page]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"friends_page_{page-1}"))
    if end < len(friends_list):
        nav_buttons.append(InlineKeyboardButton("‚û° –í–ø–µ—Ä–µ–¥", callback_data=f"friends_page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    await query.edit_message_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def open_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    vk_user_id = int(query.data.split("_")[-1])
    selected_friends[user_id] = vk_user_id

    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ID {vk_user_id}. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ VK —Å –ø–æ–¥–ø–∏—Å—å—é"""
    user_id = str(update.effective_user.id)
    vk_user_id = selected_friends.get(user_id)

    if not vk_user_id:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start.")
        return

    message_text = f"{update.message.text}\n\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é Telegram"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    vk.messages.send(user_id=vk_user_id, message=message_text, random_id=0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
    if update.message.photo:
        photo = update.message.photo[-1].file_id
        file = await application.bot.get_file(photo)
        file_path = file.file_path
        vk.messages.send(user_id=vk_user_id, attachment=f"photo{file_path}", random_id=0)

    if update.message.document:
        document = update.message.document.file_id
        file = await application.bot.get_file(document)
        file_path = file.file_path
        vk.messages.send(user_id=vk_user_id, attachment=f"doc{file_path}", random_id=0)

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

def vk_listener(loop):
    """–°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ VK"""
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    user_id = event.user_id
                    message_data = vk.messages.getHistory(user_id=user_id, count=1)['items'][0]

                    text = message_data.get('text', '')

                    asyncio.run_coroutine_threadsafe(
                        application.bot.send_message(os.getenv("TELEGRAM_CHAT_ID"), text=f"üì® –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –í–ö\n–û—Ç: {text}"),
                        loop
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK listener: {e}")
            time.sleep(5)

def main():
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_latest_messages, pattern="^latest_messages$"))
    application.add_handler(CallbackQueryHandler(show_friends, pattern="^friends_page_"))
    application.add_handler(CallbackQueryHandler(open_dialog, pattern="^open_dialog_"))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document, handle_message))

    loop = asyncio.get_event_loop()
    threading.Thread(target=vk_listener, args=(loop,), daemon=True).start()

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()