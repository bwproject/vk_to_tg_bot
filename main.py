import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import asyncio
import threading
import os
import requests
import logging
from datetime import datetime
import pytz
from dotenv import load_dotenv
from collections import OrderedDict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VK_USER_TOKEN = os.getenv("VK_USER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
AUTHORIZED_TELEGRAM_USER_ID = os.getenv("AUTHORIZED_TELEGRAM_USER_ID")
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=VK_USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

class DialogManager:
    def __init__(self):
        self.dialogs = OrderedDict()
        self.selected_dialogs = {}
        self.selected_friends = {}

    def select_dialog(self, telegram_user_id, vk_user_id):
        self.selected_dialogs[telegram_user_id] = vk_user_id

    def get_selected(self, telegram_user_id):
        return self.selected_dialogs.get(telegram_user_id)

dialog_manager = DialogManager()

async def send_to_telegram(text, attachments=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ Telegram."""
    await application.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
    
    if attachments:
        for attach in attachments:
            await application.bot.send_document(chat_id=TELEGRAM_CHAT_ID, document=attach)

def vk_listener(loop):
    """–°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å—Ç—ã –∏–∑ VK."""
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            asyncio.run_coroutine_threadsafe(
                send_to_telegram(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.user_id}:\n{event.text}"), loop
            )
        
        elif event.type == VkEventType.WALL_POST_NEW:
            post = event.raw['object']
            text = post.get("text", "")
            owner_id = post["owner_id"]
            post_url = f"https://vk.com/wall{owner_id}_{post['id']}"
            msg = f"üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n{text}\n\nüîó {post_url}"
            asyncio.run_coroutine_threadsafe(send_to_telegram(msg), loop)

async def show_friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    friends = vk.friends.get(order="hints", fields="first_name,last_name")
    friends_list = friends.get("items", [])

    if not friends_list:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ VK.")
        return

    keyboard = [
        [InlineKeyboardButton(f"{f['first_name']} {f['last_name']}", callback_data=f"friend_{f['id']}")]
        for f in friends_list[:10]
    ]

    await update.message.reply_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (–≤—ã–±–æ—Ä –¥—Ä—É–≥–∞)."""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("friend_"):
        user_id = int(query.data.split("_")[1])
        dialog_manager.select_dialog(str(update.effective_user.id), user_id)
        await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –¥—Ä—É–≥ {user_id}. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥—Ä—É–≥—É."""
    user_id = str(update.effective_user.id)
    selected_vk_id = dialog_manager.get_selected(user_id)

    if not selected_vk_id:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –∫–æ–º–∞–Ω–¥–æ–π /friends.")
        return

    vk.messages.send(user_id=selected_vk_id, message=update.message.text, random_id=0)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

def main():
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("friends", show_friends))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    loop = asyncio.get_event_loop()
    threading.Thread(target=vk_listener, args=(loop,), daemon=True).start()

    application.run_polling()

if __name__ == "__main__":
    main()