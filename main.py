import logging
import json
import vk_api
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VK
VK_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_VK"
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_TELEGRAM"
AUTHORIZED_TELEGRAM_USER_ID = "–í–ê–®_ID_–í_TG"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ VK
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É VK –∏ Telegram.")

async def get_friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑ –í–ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram"""
    try:
        user_id = update.effective_user.id
        if str(user_id) != AUTHORIZED_TELEGRAM_USER_ID:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
            return

        friends = vk.friends.get(order="hints", count=50, fields="first_name,last_name")["items"]

        if not friends:
            await update.message.reply_text("ü§∑ –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ VK.")
            return

        buttons = []
        for friend in friends:
            friend_id = friend["id"]
            name = f"{friend.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {friend.get('last_name', '')}"
            buttons.append([InlineKeyboardButton(name, callback_data=f"write_{friend_id}")])

        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π.")

async def handle_friend_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥—Ä—É–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()

    friend_id = query.data.replace("write_", "")
    context.user_data["selected_friend_id"] = friend_id

    await query.message.reply_text(f"üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @id{friend_id} (VK). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

async def send_message_to_friend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥—Ä—É–≥—É –≤ VK"""
    user_id = update.effective_user.id
    if str(user_id) != AUTHORIZED_TELEGRAM_USER_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return

    friend_id = context.user_data.get("selected_friend_id")
    if not friend_id:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –∫–æ–º–∞–Ω–¥–æ–π /friends!")
        return

    text = update.message.text
    try:
        vk.messages.send(user_id=friend_id, message=text, random_id=0)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @id{friend_id} (VK)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ Telegram-–±–æ—Ç–µ
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("friends", get_friends))
application.add_handler(CallbackQueryHandler(handle_friend_selection, pattern=r"write_\d+"))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_message_to_friend))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()