import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import asyncio
import threading
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
VK_USER_TOKEN = os.getenv("VK_USER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MESSAGE_SIGNATURE = os.getenv("MESSAGE_SIGNATURE", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ Telegram")

if not all([VK_USER_TOKEN, TELEGRAM_TOKEN]):
    raise ValueError("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=VK_USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
selected_friends = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üì© –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="latest_messages")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", callback_data="friends_page_0")]
    ]
    await update.message.reply_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_latest_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    try:
        messages = vk.messages.getConversations(count=5)["items"]

        if not messages:
            await query.edit_message_text("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        text = "üì© –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        keyboard = []

        for msg in messages:
            last_message = msg["last_message"]
            user_id = last_message["from_id"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if user_id > 0:
                try:
                    user_info = vk.users.get(user_ids=user_id, fields="first_name,last_name")[0]
                    sender_name = f"{user_info['first_name']} {user_info['last_name']} ({user_id})"
                except Exception:
                    pass
            else:
                try:
                    group_info = vk.groups.getById(group_id=abs(user_id))[0]
                    sender_name = f"{group_info['name']} ({user_id})"
                except Exception:
                    pass

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_message = last_message.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            if 'attachments' in last_message:
                text_message += "\n\nüìé –í–ª–æ–∂–µ–Ω–∏—è: " + ", ".join([attachment['type'] for attachment in last_message['attachments']])

            # –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            reply_status = "‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏" if last_message.get("reply_message") else "‚ùå –ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ"
            reply_text = f"\n–û—Ç–≤–µ—Ç: {last_message['reply_message']['text']}" if last_message.get("reply_message") else "–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏"
            if 'attachments' in last_message.get("reply_message", {}):
                reply_text += "\nüìé –í–ª–æ–∂–µ–Ω–∏—è: " + ", ".join([attachment['type'] for attachment in last_message['reply_message']['attachments']])

            text += f"\nüë§ –û—Ç: {sender_name}\n–¢–µ–∫—Å—Ç: {text_message}\n{reply_status}\n{reply_text}\n==========="
            keyboard.append([InlineKeyboardButton(f"{sender_name}", callback_data=f"open_dialog_{user_id}")])

        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def open_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    vk_user_id = int(query.data.split("_")[-1])
    selected_friends[user_id] = vk_user_id

    await query.edit_message_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å ID {vk_user_id}. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ VK"""
    user_id = str(update.effective_user.id)
    vk_user_id = selected_friends.get(user_id)

    if not vk_user_id:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start.")
        return

    message_text = f"{update.message.text}\n\n{MESSAGE_SIGNATURE}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK
    vk.messages.send(user_id=vk_user_id, message=message_text, random_id=0)

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

def vk_listener(loop):
    """–°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ VK"""
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    user_id = event.user_id
                    message_data = vk.messages.getHistory(user_id=user_id, count=1)['items'][0]

                    text = message_data.get('text', '')

                    asyncio.run_coroutine_threadsafe(
                        application.bot.send_message(
                            os.getenv("TELEGRAM_CHAT_ID"),
                            text=f"–£ –í–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –í–ö\n–û—Ç: {user_id}\n{text}"
                        ),
                        loop
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK listener: {e}")

def main():
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_latest_messages, pattern="^latest_messages$"))
    application.add_handler(CallbackQueryHandler(open_dialog, pattern="^open_dialog_"))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    loop = asyncio.get_event_loop()
    threading.Thread(target=vk_listener, args=(loop,), daemon=True).start()

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()